my $HEIGHT = 6;
my $WIDTH = 7;
my $N = 4;

my @board = map { [map { " " }, 1..$WIDTH] }, 1..$HEIGHT;

sub show_board {
    say "";
    for @board.reverse -> @row {
        say "| ", @row.fmt("%s", " | "), " |";
    }
    say "|", "-" x ($WIDTH * 4 - 1), "|";
    say "| ", (1..$WIDTH).fmt("%d", " | "), " |";
    say "";
}

sub pile_height($column) {
    die "Index $column out of range"
        unless 0 <= $column < $WIDTH;

    for 0 .. $HEIGHT - 1 -> $height {
        return $height if @board[$height][$column] eq " ";
    }
    return $HEIGHT;
}

sub pile_is_full($column) {
    pile_height($column) == $HEIGHT;
}

sub board_is_full {
    pile_is_full(all(0 .. $WIDTH - 1));
}

sub input_move {
    my $move = prompt "Player $current_player, your move: ";

    unless $move ~~ /^\d+$/ {
        say "The move must be a number.";
        return;
    }

    unless 1 <= $move <= $WIDTH {
        say "The move must be between 1 and $WIDTH.";
        return;
    }

    if pile_is_full($move - 1) {
        say "That pile is full. Try another one.";
        return;
    }

    return $move;
}

sub place_piece($column, $disk) {
    my $row = pile_height($column);
    @board[$row][$column] = $disk;
    return;
}

sub was_win($row, $column) {
    sub uniform(@values) { all(@valuesÂ».defined) && [eq] @values }

    sub was_vertical_win {
        for 0..$N-1 -> $offset {
            return True
                if uniform map {
                    $row - $offset + $_ >= 0
                        ?? @board[$row - $offset + $_][$column]
                        !! Any
                }, 0..$N-1;
        }
        return False;
    }

    sub was_horizontal_win {
        for 0..$N-1 -> $offset {
            return True
                if uniform map {
                    $column - $offset + $_ >= 0
                        ?? @board[$row][$column - $offset + $_]
                        !! Any
                }, 0..$N-1;
        }
        return False;
    }

    sub was_diagonal_win {
        for 0..$N-1 -> $offset {
            return True
                if uniform map {
                    $row - $offset + $_ >= 0 && $column - $offset + $_ >= 0
                        ?? @board[$row - $offset + $_][$column - $offset + $_]
                        !! Any
                }, 0..$N-1;

            return True
                if uniform map {
                    $row - $offset + $_ >= 0 && $column + $offset - $_ >= 0
                        ?? @board[$row - $offset + $_][$column + $offset - $_]
                        !! Any
                }, 0..$N-1;
        }
        return False;
    }

    return was_vertical_win() || was_horizontal_win() || was_diagonal_win();
}

my $current_player = "X";
loop {
    show_board();

    repeat until defined my $move {
        $move = input_move();
    }

    my $column = $move - 1;
    my $row = pile_height($column);
    place_piece($column, $current_player);

    if was_win($row, $column) {
        show_board();
        say "Player $current_player won.";
        last;
    }

    if board_is_full() {
        show_board();
        say "The game is tied.";
        last;
    }

    if $current_player eq "X" {
        $current_player = "O";
    }
    else {
        $current_player = "X";
    }
}

say "Thanks for playing!";
